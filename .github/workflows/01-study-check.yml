name: Study Check Bot
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      check_result: ${{ steps.file_check.outputs.result }}
      user_name: ${{ steps.file_check.outputs.user_name }}
      file_name: ${{ steps.file_check.outputs.file_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Check user's study file
        id: file_check
        uses: actions/github-script@v6
        with:
          script: |
            const userMapping = {
              'JANGSEYEONG': 'seyeong',
              'sooyoung159': 'sooyoung',
              'kamja44': 'hyeongho',
              'youngme92': 'youngmo'
            };

            const githubUser = context.payload.pull_request.user.login;
            const expectedFileName = userMapping[githubUser];

            // outputs 설정
            core.setOutput('user_name', githubUser);
            core.setOutput('file_name', expectedFileName || '');

            if (!expectedFileName) {
              const unregisteredMessages = [
                "🕵️ 새로운 스터디원이 등장했나요? 🎭 관리자에게 사용자 등록을 부탁드려요!",
                "🚪 아직 저희 스터디 명단에 없으신 것 같아요! 관리자에게 연락해보세요!",
                "🎪 신입 스터디원 환영해요! 🎉 하지만 먼저 관리자에게 등록을 요청해주세요!",
                "🔍 미스터리한 사용자네요! 🕵️‍♀️ 관리자에게 매핑 테이블 추가를 요청해주세요!"
              ];
              
              const randomUnregistered = unregisteredMessages[Math.floor(Math.random() * unregisteredMessages.length)];
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🎭 어라? 새로운 얼굴이네요!\n\n${randomUnregistered}\n\n---\n> 📝 **참고**: @${githubUser}님을 사용자 매핑 테이블에 추가해주세요!`
              });
              
              core.setOutput('result', 'unregistered');
              return;
            }

            // PR에서 변경된 파일들 확인
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // 해당 사용자의 마크다운 파일이 있는지 체크
            const userFile = files.data.find(file => 
              file.filename.includes(`${expectedFileName}.md`) && 
              (file.status === 'added' || file.status === 'modified')
            );

            if (userFile) {
              // 파일 내용 길이 체크
              const fileContent = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: userFile.filename,
                ref: context.payload.pull_request.head.sha
              });
              
              const contentLength = Buffer.from(fileContent.data.content, 'base64').toString().length;
              
              const successMessages = [
                `🎉 와! @${githubUser}님의 \`${expectedFileName}.md\` 파일을 발견했어요! 📚✨`,
                `🔍 찾았다! @${githubUser}님의 학습 정리가 여기 있었네요! 🎯`,
                `📝 @${githubUser}님의 \`${expectedFileName}.md\` 파일이 반짝반짝 빛나고 있어요! ✨`,
                `🎪 짜잔! @${githubUser}님의 학습 파일이 등장했어요! 📖`
              ];
              
              const randomSuccess = successMessages[Math.floor(Math.random() * successMessages.length)];
              
              let message = randomSuccess;
              
              if (contentLength < 100) {
                message += `\n\n💡 **참고**: 파일이 조금 가벼운 것 같아요! 더 많은 학습 내용이 있으면 좋겠어요! (현재: ${contentLength}자)`;
              } else {
                message += `\n\n👍 **훌륭해요**: 알찬 학습 내용이 가득하네요! (${contentLength}자)`;
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🎯 학습 파일 체크 완료!\n\n${message}\n\n---\n> 🚀 **다음 단계**: AI 리뷰봇이 곧 등장할 예정이에요!`
              });
              
              core.setOutput('result', 'success');
            } else {
              const noFileMessages = [
                `📂 어라? @${githubUser}님의 학습 파일이 숨바꼭질하고 있나요? 🙈 \`${expectedFileName}.md\` 파일을 찾을 수 없어요!`,
                `🔍 @${githubUser}님의 학습 파일을 찾는 중... 🕵️ \`${expectedFileName}.md\` 파일이 아직 보이지 않네요!`,
                `📝 @${githubUser}님의 학습 정리가 투명인간이 되었나봐요! 👻 \`${expectedFileName}.md\` 파일을 추가해주세요!`,
                `🎯 타겟을 놓쳤어요! 🏹 @${githubUser}님의 \`${expectedFileName}.md\` 파일이 필요해요!`
              ];
              
              const randomNoFile = noFileMessages[Math.floor(Math.random() * noFileMessages.length)];
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔍 학습 파일을 찾고 있어요!\n\n${randomNoFile}\n\n---\n> 📁 **필요한 파일**: \`${expectedFileName}.md\`\n> 📍 **위치**: 해당 주차 폴더 (예: \`chapter-1-설계와아키텍처란/${expectedFileName}.md\`)\n> 💡 **tip**: 파일명이 정확한지 다시 한 번 확인해주세요!`
              });
              
              core.setOutput('result', 'no_file');
            }
