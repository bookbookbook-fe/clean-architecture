name: AI Review Bot
on:
  workflow_run:
    workflows: ["Study Check Bot"]
    types:
      - completed

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  ai-review:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Study Check Bot 성공했을 때만 실행
    steps:
      - uses: actions/checkout@v4

      - name: AI Review after merge
        uses: actions/github-script@v6
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        with:
          script: |
            const userMapping = {
              'jangseyeong': 'seyeong',
              'sooyoung159': 'sooyoung',
              'kamja44': 'hyeongho',
              'youngme92': 'youngmo'
            };

            const githubUser = context.payload.pull_request.user.login;
            const expectedFileName = userMapping[githubUser];

            if (!expectedFileName) {
              return; // 등록되지 않은 사용자는 여기서 종료
            }

            // PR에서 변경된 파일들 확인
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // 해당 사용자의 마크다운 파일 찾기
            const userFile = files.data.find(file => 
              file.filename.includes(`${expectedFileName}.md`) && 
              (file.status === 'added' || file.status === 'modified')
            );

            if (!userFile) {
              return; // 파일이 없으면 여기서 종료
            }

            // 파일 내용 가져오기
            const fileContent = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: userFile.filename,
              ref: context.payload.pull_request.head.sha
            });

            const markdownContent = Buffer.from(fileContent.data.content, 'base64').toString();

            // Gemini API 호출
            const geminiApiKey = process.env.GEMINI_API_KEY;
            const prompt = `
            다음은 클린 아키텍처 스터디에서 완성된 학습 정리 내용입니다.

            ${markdownContent}

            이 학습 정리를 분석하여 다음 형식으로 따뜻하고 건설적인 피드백을 해주세요:

            📝 **요약**: (이 학습 정리의 핵심 내용을 2-3줄로 요약)
            ✨ **잘하신 점**: (구체적으로 잘 정리된 부분이나 인사이트)
            🤔 **이런 관점은 어떠세요?**: (추가로 고려해볼 만한 관점이나 연결점, 비판보다는 확장 제안)

            격려하고 동기부여하는 톤으로 작성해주세요. 한국어로 답변해주세요.
            `;

            try {
              const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  contents: [{
                    parts: [{
                      text: prompt
                    }]
                  }]
                })
              });
              
              if (!response.ok) {
                throw new Error(`Gemini API error: ${response.status}`);
              }
              
              const data = await response.json();
              const aiReview = data.candidates[0].content.parts[0].text;
              
              // AI 리뷰를 PR에 댓글로 추가
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🎓 최종 학습 리뷰\n\n${aiReview}\n\n---\n> 🌟 main에 성공적으로 머지되었습니다! 이번 주차도 고생 많으셨어요! 🎉`
              });
              
            } catch (error) {
              console.error('Gemini API 호출 실패:', error);
              
              // API 실패 시 재미있는 메시지
              const funnyMessages = [
                "🤖 AI가 커피를 마시러 갔나봐요... ☕ 하지만 여러분의 학습 열정은 이미 충분히 훌륭해요!",
                "🌙 AI가 잠깐 졸고 있는 것 같아요... 💤 대신 제가 말씀드리자면, 꾸준히 학습하는 모습이 정말 멋져요!",
                "🚀 AI가 우주여행을 떠난 것 같네요... 🛸 하지만 여러분은 이미 클린 아키텍처 우주를 탐험하고 계시죠!",
                "🍕 AI가 점심 먹으러 간 것 같아요... 🍽️ 그동안 여러분의 학습 정리를 보니 정말 알차게 공부하셨네요!",
                "🎮 AI가 잠깐 게임하러 간 것 같아요... 🕹️ 하지만 여러분은 진짜 게임 - 클린 아키텍처 마스터하기를 플레이 중이시죠!"
              ];
              
              const randomMessage = funnyMessages[Math.floor(Math.random() * funnyMessages.length)];
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🎓 최종 학습 리뷰\n\n${randomMessage}\n\n---\n> 🌟 main에 성공적으로 머지되었습니다! 이번 주차도 고생 많으셨어요! 🎉`
              });
            }
